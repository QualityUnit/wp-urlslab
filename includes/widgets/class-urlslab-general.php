<?php

// phpcs:disable WordPress

class Urlslab_General extends Urlslab_Widget {
	const SLUG = 'general';

	const SETTING_NAME_URLSLAB_API_KEY = 'urlslab-api-key';
	const SETTING_NAME_SCREENSHOT_REFRESH_INTERVAL = 'urlslab-refresh-scr';
	const SETTING_NAME_SUMMARIZATION_REFRESH_INTERVAL = 'urlslab-refresh-sum';

	/**
	 * @return string
	 */
	public function get_widget_slug(): string {
		return Urlslab_General::SLUG;
	}

	/**
	 * @return string
	 */
	public function get_widget_title(): string {
		return __( 'URLsLab Integration' );
	}

	/**
	 * @return string
	 */
	public function get_widget_description(): string {
		return __( 'Connect Urlslab.com services to your Wordpress.' );
	}

	public function is_api_key_required() {
		return true;
	}

	protected function add_options() {
		$this->add_options_form_section( 'api', __( 'URLsLab Integration' ), __( 'With URLsLab service, you can unlock the full potential of the module and reap the benefits of automation. Save yourself hours of tedious work and get accurate results - it\'s the smart way to automate data processing!' ) );
		$this->add_option_definition(
			self::SETTING_NAME_URLSLAB_API_KEY,
			'',
			true,
			__( 'URLsLab API Key' ),
			__( 'Connect the website and URLsLab service with an API Key. Get your API Key on www.urlslab.com.' ),
			self::OPTION_TYPE_PASSWORD,
			false,
			function( $value ) {
				if ( ! strlen( $value ) ) {
					return false;
				}

				if ( $value == Urlslab_Widget::PASSWORD_PLACEHOLDER ) {
					return true;
				}

				$config = \OpenAPI\Client\Configuration::getDefaultConfiguration()->setApiKey( 'X-URLSLAB-KEY', $value );

				$apiInstance = new \OpenAPI\Client\Urlslab\ApikeyApi(
					new GuzzleHttp\Client(),
					$config
				);

				try {
					$result = $apiInstance->validate();

					return $result->getAcknowledged();
				} catch ( Exception $e ) {
					return false;
				}

				return false;
			},
			'api'
		);

		$this->add_options_form_section( 'cron', __( 'Synchronization' ), __( 'Some data are generated by the URLsLab service. You can adjust the frequency of data synchronization between the URLsLab service and plugin here.' ) );
		$this->add_option_definition(
			self::SETTING_NAME_SCREENSHOT_REFRESH_INTERVAL,
			7257600,
			false,
			__( 'Synchronization Frequency of Screenshots with URLsLab service' ),
			__( 'The synchronization frequency of screenshots with the URLsLab service is different from how often URLsLab takes screenshots of the website. Even when we sync the data in the background by cron, it can use a lot of computation time. Therefore, we recommend Monthly or Quarterly synchronizations.' ),
			self::OPTION_TYPE_LISTBOX,
			array(
				604800    => __( 'Weekly' ),
				2419200   => __( 'Monthly' ),
				7257600   => __( 'Quarterly' ),
				31536000  => __( 'Yearly' ),
				999999999 => __( 'Never' ),
			),
			function( $value ) {
				return is_numeric( $value ) && 0 < $value;
			},
			'cron',
		);
		$this->add_option_definition(
			self::SETTING_NAME_SUMMARIZATION_REFRESH_INTERVAL,
			7257600,
			false,
			__( 'Synchronization Frequency of Summaries with URLsLab service' ),
			__( 'The synchronization frequency of summaries with the URLsLab service is different from how often URLsLab generates summaries of the pages. Even when we sync the data in the background by cron, it can use a lot of computation time. Therefore, we recommend Monthly or Quarterly synchronizations.' ),
			self::OPTION_TYPE_LISTBOX,
			array(
				604800    => __( 'Weekly' ),
				2419200   => __( 'Monthly' ),
				7257600   => __( 'Quarterly' ),
				31536000  => __( 'Yearly' ),
				999999999 => __( 'Never' ),
			),
			function( $value ) {
				return is_numeric( $value ) && 0 < $value;
			},
			'cron',
		);
	}
}
