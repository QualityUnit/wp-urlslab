import { useEffect, useMemo, useState } from 'react';
import { __ } from '@wordpress/i18n/';
import {
	useInfiniteFetch,
	Loader,
	Table,
	ModuleViewHeaderBottom,
	TooltipSortingFiltering,
	DateTimeFormat,
} from '../lib/tableImports';

import useTableStore from '../hooks/useTableStore';
import useTablePanels from '../hooks/useTablePanels';
import DescriptionBox from '../elements/DescriptionBox';

import '../assets/styles/components/_ModuleViewHeader.scss';

const paginationId = 'id';
const header = {
	created_at: __( 'Date', 'urlslab' ),
	workspace_id: __( 'Workspace ID', 'urlslab' ),
	transaction_type: __( 'Type', 'urlslab' ),
	cnt: __( 'Count', 'urlslab' ),
	amount: __( 'Usage', 'urlslab' ),
};
const initialState = { columnVisibility: { events: false } };

// init table state with fixed states which we do not need to update anymore during table lifecycle
export default function TableInit( { slug } ) {
	const setTable = useTableStore( ( state ) => state.setTable );
	const [ init, setInit ] = useState( false );
	useEffect( () => {
		setInit( true );
		setTable( slug, {
			paginationId,
			slug,
			header,
		} );
		useTablePanels.setState( () => (
			{
				deleteCSVCols: [ paginationId ],
			}
		) );
	}, [ setTable, slug ] );

	return init && <UsageTable slug={ slug } />;
}

function UsageTable( { slug } ) {
	const {
		columnHelper,
		data,
		isLoading,
		isSuccess,
	} = useInfiniteFetch( { slug }, 500 );

	const tableData = useMemo( () => data?.pages?.flatMap( ( page ) => page ?? [] ), [ data?.pages ] );
	const setTable = useTableStore( ( state ) => state.setTable );

	const columns = useMemo( () => [
		columnHelper.accessor( 'created_at', {
			cell: ( cell ) => <DateTimeFormat noTime datetime={ cell.getValue() } />,
			header: header.created_at,
			size: 100,
		} ),
		columnHelper.accessor( 'workspace_id', {
			header: header.workspace_id,
			size: 60,
		} ),
		columnHelper.accessor( 'transaction_type', {
			header: header.transaction_type,
			size: 100,
		} ),
		columnHelper.accessor( 'cnt', {
			header: header.cnt,
			size: 100,
		} ),
		columnHelper.accessor( 'amount', {
			header: header.amount,
			size: 100,
		} ),
	], [ columnHelper ] );

	useEffect( () => {
		setTable( slug, { data } );
	}, [ data, setTable, slug ] );

	if ( isLoading ) {
		return <Loader isFullscreen />;
	}

	return (
		<>
			<DescriptionBox	title={ __( 'About this table', 'urlslab' ) } tableSlug={ slug } isMainTableDescription>
				{ __( 'The table displays the charges deducted from your credit balance, categorized by transaction type and date. These charges are associated with tasks run by your API key. If multiple WordPress installations use the same API key, the table will also show the costs generated by all installations.', 'urlslab' ) }
			</DescriptionBox>

			<ModuleViewHeaderBottom noFiltering noCount hideActions />

			<Table
				className="fadeInto"
				columns={ columns }
				data={ isSuccess && tableData }
				initialState={ initialState }
			>
				<TooltipSortingFiltering />
			</Table>
		</>
	);
}
