<?php
/**
 * DomainDataRetrievalUrlSnapshotResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * URLSLAB API
 *
 * optimize your website with SEO
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomainDataRetrievalUrlSnapshotResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomainDataRetrievalUrlSnapshotResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domain.dataRetrieval.UrlSnapshotResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url' => 'string',
        'url_id' => 'int',
        'domain_id' => 'int',
        'snapshot_id' => 'int',
        'screenshot_key' => 'int',
        'is_changed' => 'bool',
        'page_load_duration' => 'int',
        'number_of_sub_requests' => 'int',
        'status_code' => 'int',
        'word_count' => 'int',
        'page_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'url' => null,
        'url_id' => 'int64',
        'domain_id' => 'int64',
        'snapshot_id' => 'int64',
        'screenshot_key' => 'int64',
        'is_changed' => null,
        'page_load_duration' => 'int64',
        'number_of_sub_requests' => 'int32',
        'status_code' => 'int32',
        'word_count' => 'int32',
        'page_size' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'url' => false,
		'url_id' => false,
		'domain_id' => false,
		'snapshot_id' => false,
		'screenshot_key' => false,
		'is_changed' => false,
		'page_load_duration' => false,
		'number_of_sub_requests' => false,
		'status_code' => false,
		'word_count' => false,
		'page_size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'url_id' => 'urlId',
        'domain_id' => 'domainId',
        'snapshot_id' => 'snapshotId',
        'screenshot_key' => 'screenshotKey',
        'is_changed' => 'isChanged',
        'page_load_duration' => 'pageLoadDuration',
        'number_of_sub_requests' => 'numberOfSubRequests',
        'status_code' => 'statusCode',
        'word_count' => 'wordCount',
        'page_size' => 'pageSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'url_id' => 'setUrlId',
        'domain_id' => 'setDomainId',
        'snapshot_id' => 'setSnapshotId',
        'screenshot_key' => 'setScreenshotKey',
        'is_changed' => 'setIsChanged',
        'page_load_duration' => 'setPageLoadDuration',
        'number_of_sub_requests' => 'setNumberOfSubRequests',
        'status_code' => 'setStatusCode',
        'word_count' => 'setWordCount',
        'page_size' => 'setPageSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'url_id' => 'getUrlId',
        'domain_id' => 'getDomainId',
        'snapshot_id' => 'getSnapshotId',
        'screenshot_key' => 'getScreenshotKey',
        'is_changed' => 'getIsChanged',
        'page_load_duration' => 'getPageLoadDuration',
        'number_of_sub_requests' => 'getNumberOfSubRequests',
        'status_code' => 'getStatusCode',
        'word_count' => 'getWordCount',
        'page_size' => 'getPageSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('url_id', $data ?? [], null);
        $this->setIfExists('domain_id', $data ?? [], null);
        $this->setIfExists('snapshot_id', $data ?? [], null);
        $this->setIfExists('screenshot_key', $data ?? [], null);
        $this->setIfExists('is_changed', $data ?? [], null);
        $this->setIfExists('page_load_duration', $data ?? [], null);
        $this->setIfExists('number_of_sub_requests', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('word_count', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['url_id'] === null) {
            $invalidProperties[] = "'url_id' can't be null";
        }
        if ($this->container['domain_id'] === null) {
            $invalidProperties[] = "'domain_id' can't be null";
        }
        if ($this->container['snapshot_id'] === null) {
            $invalidProperties[] = "'snapshot_id' can't be null";
        }
        if ($this->container['screenshot_key'] === null) {
            $invalidProperties[] = "'screenshot_key' can't be null";
        }
        if ($this->container['is_changed'] === null) {
            $invalidProperties[] = "'is_changed' can't be null";
        }
        if ($this->container['page_load_duration'] === null) {
            $invalidProperties[] = "'page_load_duration' can't be null";
        }
        if ($this->container['number_of_sub_requests'] === null) {
            $invalidProperties[] = "'number_of_sub_requests' can't be null";
        }
        if ($this->container['status_code'] === null) {
            $invalidProperties[] = "'status_code' can't be null";
        }
        if ($this->container['word_count'] === null) {
            $invalidProperties[] = "'word_count' can't be null";
        }
        if ($this->container['page_size'] === null) {
            $invalidProperties[] = "'page_size' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets url_id
     *
     * @return int
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param int $url_id url_id
     *
     * @return self
     */
    public function setUrlId($url_id)
    {
        if (is_null($url_id)) {
            throw new \InvalidArgumentException('non-nullable url_id cannot be null');
        }
        $this->container['url_id'] = $url_id;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return int
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param int $domain_id domain_id
     *
     * @return self
     */
    public function setDomainId($domain_id)
    {
        if (is_null($domain_id)) {
            throw new \InvalidArgumentException('non-nullable domain_id cannot be null');
        }
        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets snapshot_id
     *
     * @return int
     */
    public function getSnapshotId()
    {
        return $this->container['snapshot_id'];
    }

    /**
     * Sets snapshot_id
     *
     * @param int $snapshot_id snapshot_id
     *
     * @return self
     */
    public function setSnapshotId($snapshot_id)
    {
        if (is_null($snapshot_id)) {
            throw new \InvalidArgumentException('non-nullable snapshot_id cannot be null');
        }
        $this->container['snapshot_id'] = $snapshot_id;

        return $this;
    }

    /**
     * Gets screenshot_key
     *
     * @return int
     */
    public function getScreenshotKey()
    {
        return $this->container['screenshot_key'];
    }

    /**
     * Sets screenshot_key
     *
     * @param int $screenshot_key screenshot_key
     *
     * @return self
     */
    public function setScreenshotKey($screenshot_key)
    {
        if (is_null($screenshot_key)) {
            throw new \InvalidArgumentException('non-nullable screenshot_key cannot be null');
        }
        $this->container['screenshot_key'] = $screenshot_key;

        return $this;
    }

    /**
     * Gets is_changed
     *
     * @return bool
     */
    public function getIsChanged()
    {
        return $this->container['is_changed'];
    }

    /**
     * Sets is_changed
     *
     * @param bool $is_changed is_changed
     *
     * @return self
     */
    public function setIsChanged($is_changed)
    {
        if (is_null($is_changed)) {
            throw new \InvalidArgumentException('non-nullable is_changed cannot be null');
        }
        $this->container['is_changed'] = $is_changed;

        return $this;
    }

    /**
     * Gets page_load_duration
     *
     * @return int
     */
    public function getPageLoadDuration()
    {
        return $this->container['page_load_duration'];
    }

    /**
     * Sets page_load_duration
     *
     * @param int $page_load_duration page_load_duration
     *
     * @return self
     */
    public function setPageLoadDuration($page_load_duration)
    {
        if (is_null($page_load_duration)) {
            throw new \InvalidArgumentException('non-nullable page_load_duration cannot be null');
        }
        $this->container['page_load_duration'] = $page_load_duration;

        return $this;
    }

    /**
     * Gets number_of_sub_requests
     *
     * @return int
     */
    public function getNumberOfSubRequests()
    {
        return $this->container['number_of_sub_requests'];
    }

    /**
     * Sets number_of_sub_requests
     *
     * @param int $number_of_sub_requests number_of_sub_requests
     *
     * @return self
     */
    public function setNumberOfSubRequests($number_of_sub_requests)
    {
        if (is_null($number_of_sub_requests)) {
            throw new \InvalidArgumentException('non-nullable number_of_sub_requests cannot be null');
        }
        $this->container['number_of_sub_requests'] = $number_of_sub_requests;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            throw new \InvalidArgumentException('non-nullable status_code cannot be null');
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets word_count
     *
     * @return int
     */
    public function getWordCount()
    {
        return $this->container['word_count'];
    }

    /**
     * Sets word_count
     *
     * @param int $word_count word_count
     *
     * @return self
     */
    public function setWordCount($word_count)
    {
        if (is_null($word_count)) {
            throw new \InvalidArgumentException('non-nullable word_count cannot be null');
        }
        $this->container['word_count'] = $word_count;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


