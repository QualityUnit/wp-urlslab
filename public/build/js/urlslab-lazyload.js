/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/urlslab-lazyload.js":
/*!***************************************!*\
  !*** ./assets/js/urlslab-lazyload.js ***!
  \***************************************/
/***/ (function() {

eval("/* global IntersectionObserver, Image, getComputedStyle */\n\n/* To lazy load background images,\n\t\tadd class .lazybg to the element (even if background is in pseudo)\n*/\n\nconst urlslabLazyLoad = () => {\n  const media = document.querySelectorAll('img[urlslab-lazy], img[data-src], img[data-srcset], video[data-src], .lazybg, div[lazy_hash]');\n  const eventType = element => {\n    const elemType = element.tagName;\n    if (elemType === 'VIDEO') {\n      return 'loadeddata';\n    }\n    return 'load';\n  };\n  const loadBg = (loadedElem, mediaObject) => {\n    const target = mediaObject;\n    // Will get url from matched element\n    const url = loadedElem.match(/http.+.(jpg|png|svg|webp|avif)/g);\n    // Create shadow image to check for load event\n    const image = new Image();\n    image.src = url;\n    // If image loaded, set opacity to 1 and after transition, remove class handling transition\n    image.onload = () => {\n      target.style.opacity = null;\n      target.addEventListener('transitionend', () => {\n        target.classList.remove('lazybg-loading');\n      });\n    };\n  };\n  const lazyBgcheck = element => {\n    const mediaObject = element;\n    mediaObject.style.opacity = '0';\n    mediaObject.classList.remove('lazybg');\n    mediaObject.classList.add('lazybg-loading');\n    setTimeout(() => {\n      const loaded = window.getComputedStyle(mediaObject).backgroundImage;\n      const loadedBefore = getComputedStyle(mediaObject, ':before').backgroundImage;\n      const loadedAfter = getComputedStyle(mediaObject, ':after').backgroundImage;\n      if (loaded !== ( false || 'none')) {\n        loadBg(loaded, mediaObject);\n      } else if (loadedBefore !== ( false || 'none')) {\n        loadBg(loadedBefore, mediaObject);\n      } else if (loadedAfter !== ( false || 'none')) {\n        loadBg(loadedAfter, mediaObject);\n      }\n    }, 0);\n  };\n  const revertAttributes = element => {\n    if (element.tagName == 'DIV' && element.hasAttribute('lazy_hash')) {\n      element.classList.add(\"urlslab-loading\");\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", \"/urlslab-content/\" + element.getAttribute('lazy_hash'), true);\n      xhr.onload = e => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var div = document.createElement('div');\n            div.innerHTML = xhr.responseText;\n            element.parentElement.replaceChild(div.firstChild, element);\n          } else {\n            console.error(xhr.statusText);\n          }\n        }\n      };\n      xhr.onerror = e => {\n        console.error(xhr.statusText);\n      };\n      xhr.send(null);\n      return;\n    }\n    if (element.tagName == 'IMG' && element.hasAttribute('urlslab-lazy') && element.parentElement.tagName == 'PICTURE') {\n      element.removeAttribute('urlslab-lazy');\n      element.parentElement.childNodes.forEach(childNode => {\n        revertAttributes(childNode);\n      });\n    }\n    if (element.hasAttribute('urlslab-lazy')) {\n      element.removeAttribute('urlslab-lazy');\n    }\n    if (element.hasAttribute('data-srcset')) {\n      element.setAttribute('srcset', element.getAttribute('data-srcset'));\n      element.removeAttribute('data-srcset');\n      element.addEventListener(eventType(element), () => {\n        const e = element;\n        e.style.opacity = '1';\n      });\n    }\n    if (element.hasAttribute('data-src')) {\n      element.setAttribute('src', element.getAttribute('data-src'));\n      element.removeAttribute('data-src');\n      element.addEventListener(eventType(element), () => {\n        const e = element;\n        e.style.opacity = '1';\n      });\n    }\n    if (element.hasAttribute('data-urlslabstyle')) {\n      element.setAttribute('style', element.getAttribute('data-urlslabstyle'));\n      element.removeAttribute('data-urlslabstyle');\n    }\n    if (element.hasAttribute('data-ursllabfull-url')) {\n      element.setAttribute('data-full-url', element.getAttribute('data-ursllabfull-url'));\n      element.removeAttribute('data-ursllabfull-url');\n    }\n    if (element.classList.contains('lazybg')) {\n      lazyBgcheck(element);\n    }\n  };\n  const loadYouTube = yt => {\n    if (!yt.hasAttribute('urlslab-active')) {\n      yt.setAttribute('urlslab-active', true);\n      const videoID = yt.dataset.ytid;\n      if (videoID) {\n        const iframe = document.createElement('iframe');\n        Object.assign(iframe, {\n          className: 'youtube_urlslab_loader--embed',\n          title: yt.getAttribute('title'),\n          src: `https://www.youtube.com/embed/${videoID}?feature=oembed&autoplay=1&playsinline=1&rel=0`,\n          frameborder: '0',\n          allow: 'accelerometer; autoplay; gyroscope; fullscreen'\n        });\n        if (yt.hasAttribute('width')) {\n          iframe.setAttribute('width', yt.getAttribute('width'));\n        }\n        if (yt.hasAttribute('height')) {\n          iframe.setAttribute('height', yt.getAttribute('height'));\n        }\n        yt.insertAdjacentElement(\"afterbegin\", iframe);\n        setTimeout(() => {\n          yt.classList.add(\"active\");\n        }, 200);\n      }\n    }\n  };\n  if ('IntersectionObserver' in window) {\n    if (media.length > 0) {\n      const mediaObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            revertAttributes(entry.target);\n            mediaObserver.unobserve(entry.target);\n          }\n        });\n      }, {\n        rootMargin: '250px'\n      });\n      media.forEach(mediaObject => {\n        mediaObserver.observe(mediaObject);\n      });\n    }\n  }\n  const youtubeVideo = document.querySelectorAll('.youtube_urlslab_loader');\n  if (youtubeVideo !== null) {\n    youtubeVideo.forEach(element => {\n      const yt = element;\n      yt.addEventListener('click', () => {\n        loadYouTube(yt);\n      }, {\n        once: true\n      });\n      yt.removeEventListener('click', loadYouTube);\n    });\n  }\n};\n(() => {\n  urlslabLazyLoad();\n})();\n\n//# sourceURL=webpack://urlslab/./assets/js/urlslab-lazyload.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/js/urlslab-lazyload.js"]();
/******/ 	
/******/ })()
;